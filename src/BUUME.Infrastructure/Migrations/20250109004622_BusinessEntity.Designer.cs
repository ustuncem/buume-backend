// <auto-generated />
using System;
using BUUME.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BUUME.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250109004622_BusinessEntity")]
    partial class BusinessEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BUUME.Domain.BusinessCategories.BusinessCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_business_categories");

                    b.ToTable("business_categories", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.Businesses.Business", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uuid")
                        .HasColumnName("district_id");

                    b.Property<bool>("IsKvkkApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_kvkk_approved");

                    b.Property<Guid>("LogoId")
                        .HasColumnType("uuid")
                        .HasColumnName("logo_id");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("TaxOfficeId")
                        .HasColumnType("uuid")
                        .HasColumnName("tax_office_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_businesses");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_businesses_city_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_businesses_country_id");

                    b.HasIndex("DistrictId")
                        .HasDatabaseName("ix_businesses_district_id");

                    b.HasIndex("LogoId")
                        .HasDatabaseName("ix_businesses_logo_id");

                    b.HasIndex("OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_businesses_owner_id");

                    b.HasIndex("TaxOfficeId")
                        .HasDatabaseName("ix_businesses_tax_office_id");

                    b.ToTable("businesses", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.CampaignTypes.CampaignType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_campaign_types");

                    b.ToTable("campaign_types", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.Cities.City", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<Guid?>("RegionId")
                        .HasColumnType("uuid")
                        .HasColumnName("region_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_cities_country_id");

                    b.HasIndex("RegionId")
                        .HasDatabaseName("ix_cities_region_id");

                    b.ToTable("cities", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.Countries.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("HasRegion")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(500)
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("has_region");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_countries_name");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.Districts.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CityId")
                        .HasColumnType("uuid")
                        .HasColumnName("city_id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("code");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_districts");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_districts_city_id");

                    b.ToTable("districts", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.Files.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("path");

                    b.Property<double>("Size")
                        .HasMaxLength(500)
                        .HasColumnType("double precision")
                        .HasColumnName("size");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("type");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_files");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.Regions.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uuid")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_regions");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_regions_country_id");

                    b.ToTable("regions", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.TaxOffices.TaxOffice", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tax_offices");

                    b.ToTable("tax_offices", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("first_name");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer")
                        .HasColumnName("gender");

                    b.Property<bool?>("IsPhoneNumberVerified")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_phone_number_verified");

                    b.Property<string>("LastName")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("last_name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("phone_number");

                    b.Property<Guid?>("ProfilePhotoId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_photo_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("PhoneNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_users_phone_number");

                    b.HasIndex("ProfilePhotoId")
                        .HasDatabaseName("ix_users_profile_photo_id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("BUUME.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("content");

                    b.Property<string>("Error")
                        .HasColumnType("text")
                        .HasColumnName("error");

                    b.Property<DateTime>("OccurredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occurred_on_utc");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_outbox_messages");

                    b.ToTable("outbox_messages", (string)null);
                });

            modelBuilder.Entity("BusinessBusinessCategory", b =>
                {
                    b.Property<Guid>("BusinessCategoryId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_category_id");

                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.HasKey("BusinessCategoryId", "BusinessId")
                        .HasName("pk_business_business_category");

                    b.HasIndex("BusinessId")
                        .HasDatabaseName("ix_business_business_category_business_id");

                    b.ToTable("business_business_category", (string)null);
                });

            modelBuilder.Entity("BusinessFile", b =>
                {
                    b.Property<Guid>("BusinessId")
                        .HasColumnType("uuid")
                        .HasColumnName("business_id");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.HasKey("BusinessId", "FileId")
                        .HasName("pk_business_file");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_business_file_file_id");

                    b.ToTable("business_file", (string)null);
                });

            modelBuilder.Entity("BUUME.Domain.Businesses.Business", b =>
                {
                    b.HasOne("BUUME.Domain.Cities.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses_city_city_id");

                    b.HasOne("BUUME.Domain.Countries.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses_country_country_id");

                    b.HasOne("BUUME.Domain.Districts.District", null)
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses_district_district_id");

                    b.HasOne("BUUME.Domain.Files.File", null)
                        .WithMany()
                        .HasForeignKey("LogoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses_file_logo_id");

                    b.HasOne("BUUME.Domain.Users.User", null)
                        .WithOne()
                        .HasForeignKey("BUUME.Domain.Businesses.Business", "OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses_users_owner_id");

                    b.HasOne("BUUME.Domain.TaxOffices.TaxOffice", null)
                        .WithMany()
                        .HasForeignKey("TaxOfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_businesses_tax_office_tax_office_id");

                    b.OwnsOne("BUUME.Domain.Businesses.AddressInfo", "AddressInfo", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("address_info_address");

                            b1.Property<decimal>("Latitude")
                                .HasMaxLength(100)
                                .HasColumnType("numeric")
                                .HasColumnName("address_info_latitude");

                            b1.Property<decimal>("Longitude")
                                .HasMaxLength(100)
                                .HasColumnType("numeric")
                                .HasColumnName("address_info_longitude");

                            b1.HasKey("BusinessId");

                            b1.ToTable("businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId")
                                .HasConstraintName("fk_businesses_businesses_id");
                        });

                    b.OwnsOne("BUUME.Domain.Businesses.BaseInfo", "BaseInfo", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("Description")
                                .HasMaxLength(2000)
                                .HasColumnType("character varying(2000)")
                                .HasColumnName("base_info_description");

                            b1.Property<string>("Email")
                                .IsRequired()
                                .HasMaxLength(200)
                                .HasColumnType("character varying(200)")
                                .HasColumnName("base_info_email");

                            b1.Property<string>("MenuLink")
                                .HasColumnType("text")
                                .HasColumnName("base_info_menu_link");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("base_info_name");

                            b1.Property<string>("OnlineOrderLink")
                                .HasColumnType("text")
                                .HasColumnName("base_info_online_order_link");

                            b1.Property<string>("PhoneNumber")
                                .IsRequired()
                                .HasMaxLength(100)
                                .HasColumnType("character varying(100)")
                                .HasColumnName("base_info_phone_number");

                            b1.Property<string>("WebsiteLink")
                                .HasColumnType("text")
                                .HasColumnName("base_info_website_link");

                            b1.HasKey("BusinessId");

                            b1.ToTable("businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId")
                                .HasConstraintName("fk_businesses_businesses_id");
                        });

                    b.OwnsOne("BUUME.Domain.Businesses.TaxInfo", "TaxInfo", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<string>("TradeName")
                                .IsRequired()
                                .HasMaxLength(500)
                                .HasColumnType("character varying(500)")
                                .HasColumnName("tax_info_trade_name");

                            b1.Property<int>("Vkn")
                                .HasColumnType("integer")
                                .HasColumnName("tax_info_vkn");

                            b1.HasKey("BusinessId");

                            b1.ToTable("businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId")
                                .HasConstraintName("fk_businesses_businesses_id");
                        });

                    b.OwnsOne("BUUME.Domain.Businesses.WorkingHours", "WorkingHours", b1 =>
                        {
                            b1.Property<Guid>("BusinessId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<TimeSpan>("EndTime")
                                .HasColumnType("interval")
                                .HasColumnName("working_hours_end_time");

                            b1.Property<TimeSpan>("StartTime")
                                .HasColumnType("interval")
                                .HasColumnName("working_hours_start_time");

                            b1.HasKey("BusinessId");

                            b1.ToTable("businesses");

                            b1.WithOwner()
                                .HasForeignKey("BusinessId")
                                .HasConstraintName("fk_businesses_businesses_id");
                        });

                    b.Navigation("AddressInfo")
                        .IsRequired();

                    b.Navigation("BaseInfo")
                        .IsRequired();

                    b.Navigation("TaxInfo")
                        .IsRequired();

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("BUUME.Domain.Cities.City", b =>
                {
                    b.HasOne("BUUME.Domain.Countries.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_cities_country_country_id");

                    b.HasOne("BUUME.Domain.Regions.Region", null)
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_cities_region_region_id");
                });

            modelBuilder.Entity("BUUME.Domain.Districts.District", b =>
                {
                    b.HasOne("BUUME.Domain.Cities.City", null)
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_districts_cities_city_id");
                });

            modelBuilder.Entity("BUUME.Domain.Regions.Region", b =>
                {
                    b.HasOne("BUUME.Domain.Countries.Country", null)
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_regions_countries_country_id");
                });

            modelBuilder.Entity("BUUME.Domain.Users.User", b =>
                {
                    b.HasOne("BUUME.Domain.Files.File", null)
                        .WithMany()
                        .HasForeignKey("ProfilePhotoId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_users_files_profile_photo_id");
                });

            modelBuilder.Entity("BusinessBusinessCategory", b =>
                {
                    b.HasOne("BUUME.Domain.BusinessCategories.BusinessCategory", null)
                        .WithMany()
                        .HasForeignKey("BusinessCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_business_category_business_categories_business_cat");

                    b.HasOne("BUUME.Domain.Businesses.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_business_category_businesses_business_id");
                });

            modelBuilder.Entity("BusinessFile", b =>
                {
                    b.HasOne("BUUME.Domain.Businesses.Business", null)
                        .WithMany()
                        .HasForeignKey("BusinessId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_file_businesses_business_id");

                    b.HasOne("BUUME.Domain.Files.File", null)
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_business_file_file_file_id");
                });
#pragma warning restore 612, 618
        }
    }
}
